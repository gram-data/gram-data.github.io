{"version":3,"sources":["webpack:///./src/pages/index.tsx","webpack:///./src/components/seo.js"],"names":["IndexPage","title","h1","ol","li","ul","h2","href","h3","pre","SEO","description","lang","meta","site","useStaticQuery","metaDescription","siteMetadata","htmlAttributes","titleTemplate","name","content","property","author","concat","defaultProps"],"mappings":"2FAAA,gFA+FeA,UAzFG,kBAChB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKC,MAAM,SAEX,kBAAC,IAAOC,GAAR,+BACA,0EACA,qCACA,kBAAC,IAAOC,GAAR,KACE,kBAAC,IAAOC,GAAR,6CACA,kBAAC,IAAOA,GAAR,8CACA,kBAAC,IAAOA,GAAR,8DAGF,0CACA,kBAAC,IAAOC,GAAR,KACE,kBAAC,IAAOD,GAAR,kDAGF,kBAAC,IAAOE,GAAR,gCACA,+HAEA,2DACK,kBAAC,IAAD,CAAMC,KAAK,6DAAX,eADL,8EAGA,yOAKA,kBAAC,IAAOC,GAAR,oCACA,gOAIA,iGAEA,kBAAC,IAAOA,GAAR,iCACA,kQAIA,iSAKA,kBAAC,IAAOA,GAAR,uBACA,kMAIA,kBAAC,IAAOF,GAAR,0CACA,wJAIA,kBAAC,IAAOG,IAAR,qDAIA,mGAEA,kBAAC,IAAOA,IAAR,2HAKA,qFAEA,kBAAC,IAAOA,IAAR,gDAIA,gLAGA,kBAAC,IAAOA,IAAR,iIAOA,kBAAC,IAAOH,GAAR,2CACA,gE,kCC1FJ,iDAYA,SAASI,EAAT,GAAkD,IAAnCC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,KAAMZ,EAAS,EAATA,MAC9Ba,EAASC,yBAAe,YAAxBD,KAcFE,EAAkBL,GAAeG,EAAKG,aAAaN,YAEzD,OACE,kBAAC,IAAD,CACEO,eAAgB,CACdN,QAEFX,MAAOA,EACPkB,cAAa,QAAUL,EAAKG,aAAahB,MACzCY,KAAM,CACJ,CACEO,KAAK,cACLC,QAASL,GAEX,CACEM,SAAS,WACTD,QAASpB,GAEX,CACEqB,SAAS,iBACTD,QAASL,GAEX,CACEM,SAAS,UACTD,QAAQ,WAEV,CACED,KAAK,eACLC,QAAQ,WAEV,CACED,KAAK,kBACLC,QAASP,EAAKG,aAAaM,QAE7B,CACEH,KAAK,gBACLC,QAASpB,GAEX,CACEmB,KAAK,sBACLC,QAASL,IAEXQ,OAAOX,KAKfH,EAAIe,aAAe,CACjBb,KAAK,KACLC,KAAM,GACNF,YAAY,IAUCD","file":"component---src-pages-index-tsx-3ecd4d19f8124356d4e2.js","sourcesContent":["import React from \"react\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport { Heading, Styled, Link } from \"theme-ui\"\n\nconst IndexPage = () => (\n  <Layout>\n    <SEO title=\"Home\" />\n\n    <Styled.h1>Gram - Graphs as Paths</Styled.h1>\n    <p>Gram is a path-based graph representation. </p>\n    <p>Goals:</p>\n    <Styled.ol>\n      <Styled.li>Be able to say something about paths</Styled.li>\n      <Styled.li>Be able to process graphs as a stream</Styled.li>\n      <Styled.li>Be friendly for humans to write and machines to read</Styled.li>\n    </Styled.ol>\n\n    <p>Principles:</p>\n    <Styled.ul>\n      <Styled.li>Be explicit about implicit relationships</Styled.li>\n    </Styled.ul>\n\n    <Styled.h2>1. See the Forest Paths</Styled.h2>\n    <p>Nodes and edges are powerful for structuring information. Full graphs have interesting features. \n    </p>\n    <p>Graph theory was invented \n      to <Link href=\"https://en.wikipedia.org/wiki/Seven_Bridges_of_KÃ¶nigsberg\">find a path</Link> yet\n      dwells on the pieces of the puzzle rather than the resulting picture.</p>\n    <p>Until graphs became databases, Paths didn't really need to be concrete. Thinking about graphs as\n      an information architecture . Graph theory provides language and thinking to discuss features of a \n      graph. \n    </p>\n\n    <Styled.h3>Path Information - Route 66</Styled.h3>\n    <p>Head west from St.Louis in the USA and you may be traveling along historic Route 66. Nodes\n    and Edges could be the towns and roads along the way. Where does\n    information about Route 66 itself go? \n    </p>\n    <p>This is the canonical use case of a Path as information structure.</p>\n\n    <Styled.h3>Decorated Graphs - D3 DG</Styled.h3>\n    <p>D3.js has a lovely force-based network layout. Like many other libraries, the\n      algorithm annotates the graph with position data. Wouldn't it be nice to save\n      position and styling without compromising the domain data in the graph?\n    </p>\n    <p>Paths could achieve that by following an architectural pattern called an Entity-component-system (ECS),\n      a gift from the world of game development. Just wrap each Node (the entity) in a Path (the system) to provide\n      system-specific information (the component).\n    </p>\n\n    <Styled.h3>Shared Content</Styled.h3>\n    <p>A delivery truck driver steers a truck which physically contains packages that are owned (though not yet possed)\n      by other people. A graph can happily model all the\n    </p>\n\n    <Styled.h2>2. From nodes and edges, to paths</Styled.h2>\n    <p>Gram structures data as property graph paths.\n    In practice, that means you can write a graph \n    using Cypher paths like this:\n    </p>\n    <Styled.pre>{`\n    (a)-[e1]->(b)\n    (b)<-[e2]-(c)\n    `}</Styled.pre>\n    <p>The content values of a graph are attached to either nodes or edges:\n    </p>\n    <Styled.pre>{`\n    (a:Person {name:\"Wile E. Coyote\"})\n    (b:Company {name:\"Acme, Inc.\"})\n    (a)-[e1:CUSTOMER_OF]->(b)\n    `}</Styled.pre>\n    <p>In Cypher a path is a name bound to a path expression:\n    </p>\n    <Styled.pre>{`\n    p = (a)-[e1]->(b)<-[e2]-(c)\n    `}</Styled.pre>\n\n    <p>Gram adopts the square brackets used by relationships to also delimit a path.\n      This provides room for labels and records to be attached to a path:\n    </p>\n    <Styled.pre>{`\n    [p:TROUBLESOME {accidents:12000} (a)-[e1]->(b)]\n    // or just...\n    [p:TROUBLESOME {accidents:12000} e1]\n    `}</Styled.pre>\n\n\n    <Styled.h2>3. Write in detail, read in volume</Styled.h2>\n    <p>Nodes and edges are wonderful. \n    </p>\n  </Layout>\n)\n\nexport default IndexPage\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Helmet } from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n"],"sourceRoot":""}